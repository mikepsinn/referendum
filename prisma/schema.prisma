// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("POSTGRES_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  handle               String    @unique @default(uuid())
  loginToken           String? // Unique token for passwordless login
  tokenExpires         DateTime? // Expiration time for the login token
  accounts             Account[]
  sessions             Session[]
  address              String?
  city                 String?
  stateProvince        String?
  postalCode           String?
  signedPetition       Boolean   @default(false)
  language             String?
  warPercentageDesired Float?
  warPercentageGuessed Float?
  referrerId           String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?
  points               Int?
  badges               Json?
  countryCode          String?
  phoneNumber          String?
  newsletterSubscribed Boolean   @default(false)
  signatureTimestamp   DateTime  @default(now())
  ipAddress            String?   @db.VarChar(45)
  emailValidated       Boolean   @default(false)
  gdprConsent          Boolean   @default(false)
}
